/* automatically generated by rust-bindgen 0.72.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub const memkind_memtype_t_MEMKIND_MEMTYPE_DEFAULT: memkind_memtype_t = 1;
pub const memkind_memtype_t_MEMKIND_MEMTYPE_HIGH_BANDWIDTH: memkind_memtype_t = 2;
pub type memkind_memtype_t = ::std::os::raw::c_uint;
pub const memkind_policy_t_MEMKIND_POLICY_BIND_LOCAL: memkind_policy_t = 0;
pub const memkind_policy_t_MEMKIND_POLICY_BIND_ALL: memkind_policy_t = 1;
pub const memkind_policy_t_MEMKIND_POLICY_PREFERRED_LOCAL: memkind_policy_t = 2;
pub const memkind_policy_t_MEMKIND_POLICY_INTERLEAVE_LOCAL: memkind_policy_t = 3;
pub const memkind_policy_t_MEMKIND_POLICY_INTERLEAVE_ALL: memkind_policy_t = 4;
pub const memkind_policy_t_MEMKIND_POLICY_MAX_VALUE: memkind_policy_t = 5;
pub type memkind_policy_t = ::std::os::raw::c_uint;
pub const memkind_bits_t_MEMKIND_MASK_PAGE_SIZE_2MB: memkind_bits_t = 21;
pub type memkind_bits_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memkind {
    _unused: [u8; 0],
}
pub type memkind_t = *mut memkind;
pub const memkind_const_MEMKIND_MAX_KIND: memkind_const = 512;
pub const memkind_const_MEMKIND_ERROR_MESSAGE_SIZE: memkind_const = 128;
pub const memkind_const_MEMKIND_PMEM_MIN_SIZE: memkind_const = 16777216;
pub type memkind_const = ::std::os::raw::c_uint;
pub const MEMKIND_SUCCESS: _bindgen_ty_1 = 0;
pub const MEMKIND_ERROR_UNAVAILABLE: _bindgen_ty_1 = -1;
pub const MEMKIND_ERROR_MBIND: _bindgen_ty_1 = -2;
pub const MEMKIND_ERROR_MMAP: _bindgen_ty_1 = -3;
pub const MEMKIND_ERROR_MALLOC: _bindgen_ty_1 = -6;
pub const MEMKIND_ERROR_ENVIRON: _bindgen_ty_1 = -12;
pub const MEMKIND_ERROR_INVALID: _bindgen_ty_1 = -13;
pub const MEMKIND_ERROR_TOOMANY: _bindgen_ty_1 = -15;
pub const MEMKIND_ERROR_BADOPS: _bindgen_ty_1 = -17;
pub const MEMKIND_ERROR_HUGETLB: _bindgen_ty_1 = -18;
pub const MEMKIND_ERROR_MEMTYPE_NOT_AVAILABLE: _bindgen_ty_1 = -20;
pub const MEMKIND_ERROR_OPERATION_FAILED: _bindgen_ty_1 = -21;
pub const MEMKIND_ERROR_ARENAS_CREATE: _bindgen_ty_1 = -22;
pub const MEMKIND_ERROR_RUNTIME: _bindgen_ty_1 = -255;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const memkind_mem_usage_policy_MEMKIND_MEM_USAGE_POLICY_DEFAULT: memkind_mem_usage_policy = 0;
pub const memkind_mem_usage_policy_MEMKIND_MEM_USAGE_POLICY_CONSERVATIVE: memkind_mem_usage_policy =
    1;
pub const memkind_mem_usage_policy_MEMKIND_MEM_USAGE_POLICY_MAX_VALUE: memkind_mem_usage_policy = 2;
pub type memkind_mem_usage_policy = ::std::os::raw::c_uint;
pub const memkind_stat_type_MEMKIND_STAT_TYPE_RESIDENT: memkind_stat_type = 0;
pub const memkind_stat_type_MEMKIND_STAT_TYPE_ACTIVE: memkind_stat_type = 1;
pub const memkind_stat_type_MEMKIND_STAT_TYPE_ALLOCATED: memkind_stat_type = 2;
pub const memkind_stat_type_MEMKIND_STAT_TYPE_MAX_VALUE: memkind_stat_type = 3;
pub type memkind_stat_type = ::std::os::raw::c_uint;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_ALL: memkind_stat_print_opt = 0;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_JSON_FORMAT: memkind_stat_print_opt = 1;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_OMIT_GENERAL: memkind_stat_print_opt = 2;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_OMIT_MERGED_ARENA: memkind_stat_print_opt = 4;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_OMIT_DESTROYED_MERGED_ARENA:
    memkind_stat_print_opt = 8;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_OMIT_PER_ARENA: memkind_stat_print_opt = 16;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_OMIT_PER_SIZE_CLASS_BINS:
    memkind_stat_print_opt = 32;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_OMIT_PER_SIZE_CLASS_LARGE:
    memkind_stat_print_opt = 64;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_OMIT_MUTEX: memkind_stat_print_opt = 128;
pub const memkind_stat_print_opt_MEMKIND_STAT_PRINT_OMIT_EXTENT: memkind_stat_print_opt = 256;
pub type memkind_stat_print_opt = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memkind_config {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn memkind_config_new() -> *mut memkind_config;
}
unsafe extern "C" {
    pub fn memkind_config_delete(cfg: *mut memkind_config);
}
unsafe extern "C" {
    pub fn memkind_config_set_path(
        cfg: *mut memkind_config,
        pmem_dir: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn memkind_config_set_size(cfg: *mut memkind_config, pmem_size: usize);
}
unsafe extern "C" {
    pub fn memkind_config_set_memory_usage_policy(
        cfg: *mut memkind_config,
        policy: memkind_mem_usage_policy,
    );
}
unsafe extern "C" {
    pub fn memkind_create_kind(
        memtype_flags: memkind_memtype_t,
        policy: memkind_policy_t,
        flags: memkind_bits_t,
        kind: *mut memkind_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_destroy_kind(kind: memkind_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_detect_kind(ptr: *mut ::std::os::raw::c_void) -> memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HBW_GBTLB: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HBW_PREFERRED_GBTLB: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_GBTLB: memkind_t;
}
unsafe extern "C" {
    pub fn memkind_get_kind_by_partition(
        partition: ::std::os::raw::c_int,
        kind: *mut memkind_t,
    ) -> ::std::os::raw::c_int;
}
pub const memkind_base_partition_MEMKIND_PARTITION_DEFAULT: memkind_base_partition = 0;
pub const memkind_base_partition_MEMKIND_PARTITION_HBW: memkind_base_partition = 1;
pub const memkind_base_partition_MEMKIND_PARTITION_HBW_HUGETLB: memkind_base_partition = 2;
pub const memkind_base_partition_MEMKIND_PARTITION_HBW_PREFERRED: memkind_base_partition = 3;
pub const memkind_base_partition_MEMKIND_PARTITION_HBW_PREFERRED_HUGETLB: memkind_base_partition =
    4;
pub const memkind_base_partition_MEMKIND_PARTITION_HUGETLB: memkind_base_partition = 5;
pub const memkind_base_partition_MEMKIND_PARTITION_HBW_GBTLB: memkind_base_partition = 6;
pub const memkind_base_partition_MEMKIND_PARTITION_HBW_PREFERRED_GBTLB: memkind_base_partition = 7;
pub const memkind_base_partition_MEMKIND_PARTITION_GBTLB: memkind_base_partition = 8;
pub const memkind_base_partition_MEMKIND_PARTITION_HBW_INTERLEAVE: memkind_base_partition = 9;
pub const memkind_base_partition_MEMKIND_PARTITION_INTERLEAVE: memkind_base_partition = 10;
pub const memkind_base_partition_MEMKIND_PARTITION_REGULAR: memkind_base_partition = 11;
pub const memkind_base_partition_MEMKIND_PARTITION_HBW_ALL: memkind_base_partition = 12;
pub const memkind_base_partition_MEMKIND_PARTITION_HBW_ALL_HUGETLB: memkind_base_partition = 13;
pub const memkind_base_partition_MEMKIND_PARTITION_DAX_KMEM: memkind_base_partition = 14;
pub const memkind_base_partition_MEMKIND_PARTITION_DAX_KMEM_ALL: memkind_base_partition = 15;
pub const memkind_base_partition_MEMKIND_PARTITION_DAX_KMEM_PREFERRED: memkind_base_partition = 16;
pub const memkind_base_partition_MEMKIND_PARTITION_DAX_KMEM_INTERLEAVE: memkind_base_partition = 17;
pub const memkind_base_partition_MEMKIND_PARTITION_HIGHEST_CAPACITY: memkind_base_partition = 18;
pub const memkind_base_partition_MEMKIND_PARTITION_HIGHEST_CAPACITY_PREFERRED:
    memkind_base_partition = 19;
pub const memkind_base_partition_MEMKIND_PARTITION_HIGHEST_CAPACITY_LOCAL: memkind_base_partition =
    20;
pub const memkind_base_partition_MEMKIND_PARTITION_HIGHEST_CAPACITY_LOCAL_PREFERRED:
    memkind_base_partition = 21;
pub const memkind_base_partition_MEMKIND_PARTITION_LOWEST_LATENCY_LOCAL: memkind_base_partition =
    22;
pub const memkind_base_partition_MEMKIND_PARTITION_LOWEST_LATENCY_LOCAL_PREFERRED:
    memkind_base_partition = 23;
pub const memkind_base_partition_MEMKIND_PARTITION_HIGHEST_BANDWIDTH_LOCAL: memkind_base_partition =
    24;
pub const memkind_base_partition_MEMKIND_PARTITION_HIGHEST_BANDWIDTH_LOCAL_PREFERRED:
    memkind_base_partition = 25;
pub const memkind_base_partition_MEMKIND_NUM_BASE_KIND: memkind_base_partition = 26;
pub type memkind_base_partition = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub static mut MEMKIND_REGULAR: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_DEFAULT: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HUGETLB: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HBW: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HBW_ALL: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HBW_PREFERRED: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HBW_HUGETLB: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HBW_ALL_HUGETLB: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HBW_PREFERRED_HUGETLB: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HBW_INTERLEAVE: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_INTERLEAVE: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_DAX_KMEM: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_DAX_KMEM_ALL: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_DAX_KMEM_PREFERRED: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_DAX_KMEM_INTERLEAVE: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HIGHEST_CAPACITY: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HIGHEST_CAPACITY_PREFERRED: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HIGHEST_CAPACITY_LOCAL: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HIGHEST_CAPACITY_LOCAL_PREFERRED: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_LOWEST_LATENCY_LOCAL: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_LOWEST_LATENCY_LOCAL_PREFERRED: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HIGHEST_BANDWIDTH_LOCAL: memkind_t;
}
unsafe extern "C" {
    pub static mut MEMKIND_HIGHEST_BANDWIDTH_LOCAL_PREFERRED: memkind_t;
}
unsafe extern "C" {
    pub fn memkind_get_version() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_error_message(
        err: ::std::os::raw::c_int,
        msg: *mut ::std::os::raw::c_char,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn memkind_create_pmem(
        dir: *const ::std::os::raw::c_char,
        max_size: usize,
        kind: *mut memkind_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_create_pmem_with_config(
        cfg: *mut memkind_config,
        kind: *mut memkind_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_create_fixed(
        addr: *mut ::std::os::raw::c_void,
        size: usize,
        kind: *mut memkind_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_check_available(kind: memkind_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_get_capacity(kind: memkind_t) -> isize;
}
unsafe extern "C" {
    pub fn memkind_update_cached_stats() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_get_stat(
        kind: memkind_t,
        stat: memkind_stat_type,
        value: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_stats_print(
        write_cb: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
            ),
        >,
        cbopaque: *mut ::std::os::raw::c_void,
        opts: memkind_stat_print_opt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_malloc(kind: memkind_t, size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memkind_malloc_usable_size(kind: memkind_t, ptr: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn memkind_calloc(kind: memkind_t, num: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memkind_posix_memalign(
        kind: memkind_t,
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_realloc(
        kind: memkind_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memkind_free(kind: memkind_t, ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn memkind_defrag_reallocate(
        kind: memkind_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memkind_check_dax_path(pmem_dir: *const ::std::os::raw::c_char)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memkind_set_bg_threads(state: bool) -> ::std::os::raw::c_int;
}
