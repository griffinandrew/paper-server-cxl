/* automatically generated by rust-bindgen 0.72.1 */

pub const UMF_MEMORY_POOL_H: u32 = 1;
pub const UMF_BASE_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const UMF_MEMORY_POOL_OPS_H: u32 = 1;
pub const UMF_MEMORY_PROVIDER_H: u32 = 1;
pub const UMF_MEMORY_PROVIDER_OPS_H: u32 = 1;
pub const UMF_DEVDAX_RESULTS_START_FROM: u32 = 2000;
pub const UMF_JEMALLOC_MEMORY_POOL_H: u32 = 1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const umf_result_t_UMF_RESULT_SUCCESS: umf_result_t = 0;
pub const umf_result_t_UMF_RESULT_ERROR_OUT_OF_HOST_MEMORY: umf_result_t = 1;
pub const umf_result_t_UMF_RESULT_ERROR_MEMORY_PROVIDER_SPECIFIC: umf_result_t = 2;
pub const umf_result_t_UMF_RESULT_ERROR_INVALID_ARGUMENT: umf_result_t = 3;
pub const umf_result_t_UMF_RESULT_ERROR_INVALID_ALIGNMENT: umf_result_t = 4;
pub const umf_result_t_UMF_RESULT_ERROR_NOT_SUPPORTED: umf_result_t = 5;
pub const umf_result_t_UMF_RESULT_ERROR_USER_SPECIFIC: umf_result_t = 6;
pub const umf_result_t_UMF_RESULT_ERROR_DEPENDENCY_UNAVAILABLE: umf_result_t = 7;
pub const umf_result_t_UMF_RESULT_ERROR_OUT_OF_RESOURCES: umf_result_t = 8;
pub const umf_result_t_UMF_RESULT_ERROR_UNKNOWN: umf_result_t = 2147483646;
pub type umf_result_t = ::std::os::raw::c_uint;
pub const umf_ctl_query_type_CTL_QUERY_READ: umf_ctl_query_type = 0;
pub const umf_ctl_query_type_CTL_QUERY_WRITE: umf_ctl_query_type = 1;
pub const umf_ctl_query_type_CTL_QUERY_RUNNABLE: umf_ctl_query_type = 2;
pub type umf_ctl_query_type = ::std::os::raw::c_uint;
pub use self::umf_ctl_query_type as umf_ctl_query_type_t;
pub const ctl_query_source_CTL_UNKNOWN_QUERY_SOURCE: ctl_query_source = 0;
pub const ctl_query_source_CTL_QUERY_PROGRAMMATIC: ctl_query_source = 1;
pub const ctl_query_source_CTL_QUERY_CONFIG_INPUT: ctl_query_source = 2;
pub type ctl_query_source = ::std::os::raw::c_uint;
pub use self::ctl_query_source as umf_ctl_query_source_t;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct umf_memory_provider_ops_t {
    pub version: u32,
    pub initialize: ::std::option::Option<
        unsafe extern "C" fn(
            params: *const ::std::os::raw::c_void,
            provider: *mut *mut ::std::os::raw::c_void,
        ) -> umf_result_t,
    >,
    pub finalize: ::std::option::Option<
        unsafe extern "C" fn(provider: *mut ::std::os::raw::c_void) -> umf_result_t,
    >,
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
            ptr: *mut *mut ::std::os::raw::c_void,
        ) -> umf_result_t,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> umf_result_t,
    >,
    pub get_last_native_error: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            ppMessage: *mut *const ::std::os::raw::c_char,
            pError: *mut i32,
        ) -> umf_result_t,
    >,
    pub get_recommended_page_size: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            size: usize,
            pageSize: *mut usize,
        ) -> umf_result_t,
    >,
    pub get_min_page_size: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            ptr: *const ::std::os::raw::c_void,
            pageSize: *mut usize,
        ) -> umf_result_t,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            name: *mut *const ::std::os::raw::c_char,
        ) -> umf_result_t,
    >,
    pub ext_purge_lazy: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> umf_result_t,
    >,
    pub ext_purge_force: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> umf_result_t,
    >,
    pub ext_allocation_merge: ::std::option::Option<
        unsafe extern "C" fn(
            hProvider: *mut ::std::os::raw::c_void,
            lowPtr: *mut ::std::os::raw::c_void,
            highPtr: *mut ::std::os::raw::c_void,
            totalSize: usize,
        ) -> umf_result_t,
    >,
    pub ext_allocation_split: ::std::option::Option<
        unsafe extern "C" fn(
            hProvider: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            totalSize: usize,
            firstSize: usize,
        ) -> umf_result_t,
    >,
    pub ext_get_ipc_handle_size: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            size: *mut usize,
        ) -> umf_result_t,
    >,
    pub ext_get_ipc_handle: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            providerIpcData: *mut ::std::os::raw::c_void,
        ) -> umf_result_t,
    >,
    pub ext_put_ipc_handle: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            providerIpcData: *mut ::std::os::raw::c_void,
        ) -> umf_result_t,
    >,
    pub ext_open_ipc_handle: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            providerIpcData: *mut ::std::os::raw::c_void,
            ptr: *mut *mut ::std::os::raw::c_void,
        ) -> umf_result_t,
    >,
    pub ext_close_ipc_handle: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> umf_result_t,
    >,
    pub ext_ctl: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut ::std::os::raw::c_void,
            source: umf_ctl_query_source_t,
            name: *const ::std::os::raw::c_char,
            arg: *mut ::std::os::raw::c_void,
            size: usize,
            queryType: umf_ctl_query_type_t,
            args: *mut __va_list_tag,
        ) -> umf_result_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of umf_memory_provider_ops_t"]
        [::std::mem::size_of::<umf_memory_provider_ops_t>() - 152usize];
    ["Alignment of umf_memory_provider_ops_t"]
        [::std::mem::align_of::<umf_memory_provider_ops_t>() - 8usize];
    ["Offset of field: umf_memory_provider_ops_t::version"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, version) - 0usize];
    ["Offset of field: umf_memory_provider_ops_t::initialize"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, initialize) - 8usize];
    ["Offset of field: umf_memory_provider_ops_t::finalize"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, finalize) - 16usize];
    ["Offset of field: umf_memory_provider_ops_t::alloc"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, alloc) - 24usize];
    ["Offset of field: umf_memory_provider_ops_t::free"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, free) - 32usize];
    ["Offset of field: umf_memory_provider_ops_t::get_last_native_error"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, get_last_native_error) - 40usize];
    ["Offset of field: umf_memory_provider_ops_t::get_recommended_page_size"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, get_recommended_page_size) - 48usize];
    ["Offset of field: umf_memory_provider_ops_t::get_min_page_size"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, get_min_page_size) - 56usize];
    ["Offset of field: umf_memory_provider_ops_t::get_name"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, get_name) - 64usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_purge_lazy"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_purge_lazy) - 72usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_purge_force"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_purge_force) - 80usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_allocation_merge"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_allocation_merge) - 88usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_allocation_split"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_allocation_split) - 96usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_get_ipc_handle_size"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_get_ipc_handle_size) - 104usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_get_ipc_handle"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_get_ipc_handle) - 112usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_put_ipc_handle"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_put_ipc_handle) - 120usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_open_ipc_handle"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_open_ipc_handle) - 128usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_close_ipc_handle"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_close_ipc_handle) - 136usize];
    ["Offset of field: umf_memory_provider_ops_t::ext_ctl"]
        [::std::mem::offset_of!(umf_memory_provider_ops_t, ext_ctl) - 144usize];
};
pub const umf_memory_visibility_t_UMF_MEM_MAP_PRIVATE: umf_memory_visibility_t = 1;
pub const umf_memory_visibility_t_UMF_MEM_MAP_SHARED: umf_memory_visibility_t = 2;
pub type umf_memory_visibility_t = ::std::os::raw::c_uint;
pub const umf_mem_protection_flag_t_UMF_PROTECTION_NONE: umf_mem_protection_flag_t = 1;
pub const umf_mem_protection_flag_t_UMF_PROTECTION_READ: umf_mem_protection_flag_t = 2;
pub const umf_mem_protection_flag_t_UMF_PROTECTION_WRITE: umf_mem_protection_flag_t = 4;
pub const umf_mem_protection_flag_t_UMF_PROTECTION_EXEC: umf_mem_protection_flag_t = 8;
pub const umf_mem_protection_flag_t_UMF_PROTECTION_MAX: umf_mem_protection_flag_t = 9;
pub type umf_mem_protection_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct umf_memory_provider_t {
    _unused: [u8; 0],
}
pub type umf_memory_provider_handle_t = *mut umf_memory_provider_t;
unsafe extern "C" {
    pub fn umfMemoryProviderCreate(
        ops: *const umf_memory_provider_ops_t,
        params: *const ::std::os::raw::c_void,
        hProvider: *mut umf_memory_provider_handle_t,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderDestroy(hProvider: umf_memory_provider_handle_t) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderAlloc(
        hProvider: umf_memory_provider_handle_t,
        size: usize,
        alignment: usize,
        ptr: *mut *mut ::std::os::raw::c_void,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderFree(
        hProvider: umf_memory_provider_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderGetLastNativeError(
        hProvider: umf_memory_provider_handle_t,
        ppMessage: *mut *const ::std::os::raw::c_char,
        pError: *mut i32,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderGetRecommendedPageSize(
        hProvider: umf_memory_provider_handle_t,
        size: usize,
        pageSize: *mut usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderGetMinPageSize(
        hProvider: umf_memory_provider_handle_t,
        ptr: *const ::std::os::raw::c_void,
        pageSize: *mut usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderPurgeLazy(
        hProvider: umf_memory_provider_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderPurgeForce(
        hProvider: umf_memory_provider_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderGetIPCHandleSize(
        hProvider: umf_memory_provider_handle_t,
        size: *mut usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderGetIPCHandle(
        hProvider: umf_memory_provider_handle_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
        providerIpcData: *mut ::std::os::raw::c_void,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderPutIPCHandle(
        hProvider: umf_memory_provider_handle_t,
        providerIpcData: *mut ::std::os::raw::c_void,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderOpenIPCHandle(
        hProvider: umf_memory_provider_handle_t,
        providerIpcData: *mut ::std::os::raw::c_void,
        ptr: *mut *mut ::std::os::raw::c_void,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderCloseIPCHandle(
        hProvider: umf_memory_provider_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderGetName(
        hProvider: umf_memory_provider_handle_t,
        name: *mut *const ::std::os::raw::c_char,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfGetLastFailedMemoryProvider(
        provider: *mut umf_memory_provider_handle_t,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderAllocationSplit(
        hProvider: umf_memory_provider_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        totalSize: usize,
        firstSize: usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfMemoryProviderAllocationMerge(
        hProvider: umf_memory_provider_handle_t,
        lowPtr: *mut ::std::os::raw::c_void,
        highPtr: *mut ::std::os::raw::c_void,
        totalSize: usize,
    ) -> umf_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct umf_memory_pool_ops_t {
    pub version: u32,
    pub initialize: ::std::option::Option<
        unsafe extern "C" fn(
            provider: umf_memory_provider_handle_t,
            params: *const ::std::os::raw::c_void,
            pool: *mut *mut ::std::os::raw::c_void,
        ) -> umf_result_t,
    >,
    pub finalize: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut ::std::os::raw::c_void) -> umf_result_t,
    >,
    pub malloc: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub calloc: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut ::std::os::raw::c_void,
            num: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub aligned_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub malloc_usable_size: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut ::std::os::raw::c_void,
            ptr: *const ::std::os::raw::c_void,
            size: *mut usize,
        ) -> umf_result_t,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
        ) -> umf_result_t,
    >,
    pub get_last_allocation_error: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut ::std::os::raw::c_void) -> umf_result_t,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut ::std::os::raw::c_void,
            name: *mut *const ::std::os::raw::c_char,
        ) -> umf_result_t,
    >,
    pub ext_ctl: ::std::option::Option<
        unsafe extern "C" fn(
            hPool: *mut ::std::os::raw::c_void,
            source: umf_ctl_query_source_t,
            name: *const ::std::os::raw::c_char,
            arg: *mut ::std::os::raw::c_void,
            size: usize,
            queryType: umf_ctl_query_type_t,
            args: *mut __va_list_tag,
        ) -> umf_result_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of umf_memory_pool_ops_t"][::std::mem::size_of::<umf_memory_pool_ops_t>() - 96usize];
    ["Alignment of umf_memory_pool_ops_t"]
        [::std::mem::align_of::<umf_memory_pool_ops_t>() - 8usize];
    ["Offset of field: umf_memory_pool_ops_t::version"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, version) - 0usize];
    ["Offset of field: umf_memory_pool_ops_t::initialize"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, initialize) - 8usize];
    ["Offset of field: umf_memory_pool_ops_t::finalize"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, finalize) - 16usize];
    ["Offset of field: umf_memory_pool_ops_t::malloc"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, malloc) - 24usize];
    ["Offset of field: umf_memory_pool_ops_t::calloc"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, calloc) - 32usize];
    ["Offset of field: umf_memory_pool_ops_t::realloc"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, realloc) - 40usize];
    ["Offset of field: umf_memory_pool_ops_t::aligned_malloc"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, aligned_malloc) - 48usize];
    ["Offset of field: umf_memory_pool_ops_t::malloc_usable_size"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, malloc_usable_size) - 56usize];
    ["Offset of field: umf_memory_pool_ops_t::free"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, free) - 64usize];
    ["Offset of field: umf_memory_pool_ops_t::get_last_allocation_error"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, get_last_allocation_error) - 72usize];
    ["Offset of field: umf_memory_pool_ops_t::get_name"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, get_name) - 80usize];
    ["Offset of field: umf_memory_pool_ops_t::ext_ctl"]
        [::std::mem::offset_of!(umf_memory_pool_ops_t, ext_ctl) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct umf_memory_pool_t {
    _unused: [u8; 0],
}
pub type umf_memory_pool_handle_t = *mut umf_memory_pool_t;
pub const umf_pool_create_flag_t_UMF_POOL_CREATE_FLAG_NONE: umf_pool_create_flag_t = 0;
pub const umf_pool_create_flag_t_UMF_POOL_CREATE_FLAG_OWN_PROVIDER: umf_pool_create_flag_t = 1;
pub const umf_pool_create_flag_t_UMF_POOL_CREATE_FLAG_DISABLE_TRACKING: umf_pool_create_flag_t = 2;
pub const umf_pool_create_flag_t_UMF_POOL_CREATE_FLAG_FORCE_UINT32: umf_pool_create_flag_t =
    2147483647;
pub type umf_pool_create_flag_t = ::std::os::raw::c_uint;
pub type umf_pool_create_flags_t = u32;
unsafe extern "C" {
    pub fn umfPoolCreate(
        ops: *const umf_memory_pool_ops_t,
        provider: umf_memory_provider_handle_t,
        params: *const ::std::os::raw::c_void,
        flags: umf_pool_create_flags_t,
        hPool: *mut umf_memory_pool_handle_t,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfPoolDestroy(hPool: umf_memory_pool_handle_t) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfPoolMalloc(
        hPool: umf_memory_pool_handle_t,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn umfPoolAlignedMalloc(
        hPool: umf_memory_pool_handle_t,
        size: usize,
        alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn umfPoolCalloc(
        hPool: umf_memory_pool_handle_t,
        num: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn umfPoolRealloc(
        hPool: umf_memory_pool_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn umfPoolMallocUsableSize(
        hPool: umf_memory_pool_handle_t,
        ptr: *const ::std::os::raw::c_void,
        size: *mut usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfPoolFree(
        hPool: umf_memory_pool_handle_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfFree(ptr: *mut ::std::os::raw::c_void) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfPoolGetLastAllocationError(hPool: umf_memory_pool_handle_t) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfPoolByPtr(
        ptr: *const ::std::os::raw::c_void,
        pool: *mut umf_memory_pool_handle_t,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfPoolGetMemoryProvider(
        hPool: umf_memory_pool_handle_t,
        hProvider: *mut umf_memory_provider_handle_t,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfPoolGetName(
        pool: umf_memory_pool_handle_t,
        name: *mut *const ::std::os::raw::c_char,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfPoolSetTag(
        hPool: umf_memory_pool_handle_t,
        tag: *mut ::std::os::raw::c_void,
        oldTag: *mut *mut ::std::os::raw::c_void,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfPoolGetTag(
        hPool: umf_memory_pool_handle_t,
        tag: *mut *mut ::std::os::raw::c_void,
    ) -> umf_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct umf_devdax_memory_provider_params_t {
    _unused: [u8; 0],
}
pub type umf_devdax_memory_provider_params_handle_t = *mut umf_devdax_memory_provider_params_t;
unsafe extern "C" {
    pub fn umfDevDaxMemoryProviderParamsCreate(
        path: *const ::std::os::raw::c_char,
        size: usize,
        hParams: *mut umf_devdax_memory_provider_params_handle_t,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfDevDaxMemoryProviderParamsDestroy(
        hParams: umf_devdax_memory_provider_params_handle_t,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfDevDaxMemoryProviderParamsSetDeviceDax(
        hParams: umf_devdax_memory_provider_params_handle_t,
        path: *const ::std::os::raw::c_char,
        size: usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfDevDaxMemoryProviderParamsSetProtection(
        hParams: umf_devdax_memory_provider_params_handle_t,
        protection: ::std::os::raw::c_uint,
    ) -> umf_result_t;
}
pub const umf_devdax_memory_provider_native_error_UMF_DEVDAX_RESULT_SUCCESS:
    umf_devdax_memory_provider_native_error = 2000;
pub const umf_devdax_memory_provider_native_error_UMF_DEVDAX_RESULT_ERROR_ALLOC_FAILED:
    umf_devdax_memory_provider_native_error = 2001;
pub const umf_devdax_memory_provider_native_error_UMF_DEVDAX_RESULT_ERROR_ADDRESS_NOT_ALIGNED:
    umf_devdax_memory_provider_native_error = 2002;
pub const umf_devdax_memory_provider_native_error_UMF_DEVDAX_RESULT_ERROR_FREE_FAILED:
    umf_devdax_memory_provider_native_error = 2003;
pub const umf_devdax_memory_provider_native_error_UMF_DEVDAX_RESULT_ERROR_PURGE_FORCE_FAILED:
    umf_devdax_memory_provider_native_error = 2004;
pub type umf_devdax_memory_provider_native_error = ::std::os::raw::c_uint;
pub use self::umf_devdax_memory_provider_native_error as umf_devdax_memory_provider_native_error_t;
unsafe extern "C" {
    pub fn umfDevDaxMemoryProviderOps() -> *const umf_memory_provider_ops_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct umf_jemalloc_pool_params_t {
    _unused: [u8; 0],
}
pub type umf_jemalloc_pool_params_handle_t = *mut umf_jemalloc_pool_params_t;
unsafe extern "C" {
    pub fn umfJemallocPoolParamsCreate(
        hParams: *mut umf_jemalloc_pool_params_handle_t,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfJemallocPoolParamsDestroy(hParams: umf_jemalloc_pool_params_handle_t)
    -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfJemallocPoolParamsSetNumArenas(
        hParams: umf_jemalloc_pool_params_handle_t,
        numArenas: usize,
    ) -> umf_result_t;
}
unsafe extern "C" {
    pub fn umfJemallocPoolOps() -> *const umf_memory_pool_ops_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
